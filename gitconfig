[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    l2 = log --pretty=oneline --graph --abbrev-commit
    l3 = log --graph --abbrev-commit --decorate --date=relative --all

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Nicer diffs for prose
    wd = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --word-diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Show the diff between the current branch and the master
    dim = !"git diff origin/master"

    # Show the diff between the current branch and the develop
    did = !"git diff origin/develop"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Remove branches on the remote `origin` that have already been merged with origin/master
    # see https://salferrarello.com/git-delete-merged-branches-from-remote/
    dmo = "!git branch --all --merged remotes/origin/master | grep --invert-match master | grep --invert-match HEAD | grep "remotes/origin/" | cut -d "/" -f 3- | xargs -n 1 git push --delete origin"

    # Remove branches on the remote `GitHub` that have already been merged with GitHub/master
    # see https://salferrarello.com/git-delete-merged-branches-from-remote/
    dmg  = "!git branch --all --merged remotes/GitHub/master | grep --invert-match master | grep --invert-match HEAD | grep "remotes/GitHub/" | cut -d "/" -f 3- | xargs -n 1 git push --delete GitHub"

    # List contributors with number of commits
    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Show your ten most recently checked out branches
    recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"

    # See everything everyone has done recently
    overview = log --oneline --no-merges

    # See today’s work
    today = log --since=\"00:00:00\" --all --no-merges --oneline --author="Aellen"

    # See everything I have done recently
    recap = log --oneline --no-merges --author="Aellen"

    # See which commits are on the remote that aren’t on your local branch
    upstream = "! git fetch && git log --oneline --no-merges ..origin/$(git rev-parse --abbrev-ref HEAD)"

    # See which commits are on your local branch that aren’t on the remote
    local = "! git log --oneline --no-merges origin/$(git rev-parse --abbrev-ref HEAD).."

    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git rebase master pr/$1 && \
            git checkout master && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

    # Revert all local change
    r = checkout -- .

    # Revert and remove untracked files and directories
    rd = "!git checkout -- . && git clean -fd"

[user]
    name = Cédric Aellen
    mail = cedric.aellen@alienlebarge.ch

[push]
    default = current

[pull]
    rebase = true

[color]
    ui = true

[filter "media"]
    clean = git media clean %f
    smudge = git media smudge %f
    required = true

[core]
    editor = vim

[credential]
    helper = osxkeychain

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
